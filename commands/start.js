const config = require('../config/config');
const logger = require('../utils/logger');

class StartCommand {
    async handle(socket, message, user, args) {
        try {
            const welcomeText = `üéâ *Welcome to ${config.BOT_NAME}!*\n\n` +
                `üëã Hello ${user.name || 'there'}!\n\n` +
                `ü§ñ I'm an AI-powered WhatsApp bot with amazing features:\n\n` +
                `‚ú® *What I can do:*\n` +
                `ü§ñ AI Chat & Conversations\n` +
                `üìÑ Document Analysis\n` +
                `üñºÔ∏è Image Analysis\n` +
                `üéÆ Interactive Games\n` +
                `üìä Statistics & Analytics\n` +
                `üîò Button Interactions\n\n` +
                `üí° *Quick Start:*\n` +
                `‚Ä¢ Type any message to chat with AI\n` +
                `‚Ä¢ Send documents/images for analysis\n` +
                `‚Ä¢ Use /help for all commands\n` +
                `‚Ä¢ Try /games for fun activities\n\n` +
                `üöÄ Ready to explore? Choose an option below!`;

            const buttons = [
                { id: 'help_commands', text: 'üìö View Commands' },
                { id: 'help_games', text: 'üéÆ Play Games' },
                { id: 'help_ai', text: 'ü§ñ AI Features' }
            ];

            if (user.isAdmin) {
                buttons.push({ id: 'admin_stats', text: 'üëë Admin Panel' });
            }

            await socket.sendMessage(message.key.remoteJid, {
                text: welcomeText,
                buttons: buttons.map((btn, index) => ({
                    buttonId: btn.id,
                    buttonText: { displayText: btn.text },
                    type: 1
                })),
                headerType: 1,
                footer: `${config.BOT_NAME} - Your AI Assistant`
            });

            logger.info(`üëã Welcome message sent to user ${user.phoneNumber}`);

        } catch (error) {
            logger.error('‚ùå Error in start command:', error);
            await socket.sendMessage(message.key.remoteJid, {
                text: `ü§ñ Welcome to ${config.BOT_NAME}!\n\nType /help to get started.`
            });
        }
    }

    async showMainMenu(socket, message, user) {
        try {
            const menuText = `üè† *Main Menu*\n\n` +
                `Choose what you'd like to do:\n\n` +
                `ü§ñ *AI Features:*\n` +
                `‚Ä¢ Chat with AI assistant\n` +
                `‚Ä¢ Analyze documents & images\n` +
                `‚Ä¢ Ask questions & get answers\n\n` +
                `üéÆ *Games & Fun:*\n` +
                `‚Ä¢ Rock Paper Scissors\n` +
                `‚Ä¢ Quiz & Trivia\n` +
                `‚Ä¢ More games coming soon!\n\n` +
                `üõ†Ô∏è *Utilities:*\n` +
                `‚Ä¢ Bot status & information\n` +
                `‚Ä¢ Help & command list\n` +
                `‚Ä¢ User statistics`;

            const sections = [
                {
                    title: "ü§ñ AI Features",
                    rows: [
                        { title: "üí¨ Chat with AI", description: "Start a conversation with AI", rowId: "help_ai" },
                        { title: "üìÑ Analyze Documents", description: "Send files for AI analysis", rowId: "help_ai" },
                        { title: "üñºÔ∏è Analyze Images", description: "Send images for AI analysis", rowId: "help_ai" }
                    ]
                },
                {
                    title: "üéÆ Games",
                    rows: [
                        { title: "ü™® Rock Paper Scissors", description: "Play RPS with the bot", rowId: "rps_start" },
                        { title: "üß† Quiz & Trivia", description: "Test your knowledge", rowId: "quiz_start" },
                        { title: "üìä Game Statistics", description: "View your game stats", rowId: "gamestats_show" }
                    ]
                },
                {
                    title: "üõ†Ô∏è Utilities",
                    rows: [
                        { title: "üìö Help & Commands", description: "View all available commands", rowId: "help_commands" },
                        { title: "üìä Bot Status", description: "Check bot status and uptime", rowId: "status_show" },
                        { title: "‚ÑπÔ∏è About Bot", description: "Learn about this bot", rowId: "about_show" }
                    ]
                }
            ];

            if (user.isAdmin) {
                sections.push({
                    title: "üëë Admin Features",
                    rows: [
                        { title: "üìä Bot Statistics", description: "View detailed bot stats", rowId: "admin_stats" },
                        { title: "üë• User Management", description: "Manage users and permissions", rowId: "admin_users" },
                        { title: "üì¢ Broadcast Message", description: "Send message to all users", rowId: "admin_broadcast" },
                        { title: "‚öôÔ∏è Bot Settings", description: "Configure bot settings", rowId: "admin_settings" }
                    ]
                });
            }

            await socket.sendMessage(message.key.remoteJid, {
                text: menuText,
                footer: `${config.BOT_NAME} - Main Menu`,
                title: "üè† Main Menu",
                buttonText: "üìã Select Option",
                sections: sections
            });

        } catch (error) {
            logger.error('‚ùå Error showing main menu:', error);
            await socket.sendMessage(message.key.remoteJid, {
                text: `üè† *Main Menu*\n\nUse these commands:\n‚Ä¢ /help - Show all commands\n‚Ä¢ /games - Play games\n‚Ä¢ /ai - Chat with AI\n\nOr just send any message to chat!`
            });
        }
    }

    async showQuickActions(socket, message, user) {
        try {
            const buttons = [
                { id: 'rps_play_again', text: 'ü™® Play RPS' },
                { id: 'quiz_next', text: 'üß† Start Quiz' },
                { id: 'help_commands', text: 'üìö Commands' }
            ];

            if (user.isAdmin) {
                buttons.push({ id: 'admin_stats', text: 'üëë Admin' });
            }

            await socket.sendMessage(message.key.remoteJid, {
                text: `‚ö° *Quick Actions*\n\nChoose what you'd like to do:`,
                buttons: buttons.map((btn, index) => ({
                    buttonId: btn.id,
                    buttonText: { displayText: btn.text },
                    type: 1
                })),
                headerType: 1,
                footer: 'Quick access to popular features'
            });

        } catch (error) {
            logger.error('‚ùå Error showing quick actions:', error);
        }
    }

    async showUserProfile(socket, message, user) {
        try {
            const userService = require('../services/userService');
            const gameStats = user.gameStats || {};
            
            let profileText = `üë§ *Your Profile*\n\n`;
            profileText += `üì± *Phone:* ${user.phoneNumber}\n`;
            profileText += `üë§ *Name:* ${user.name || 'Not set'}\n`;
            profileText += `üìÖ *Member since:* ${new Date(user.createdAt).toLocaleDateString()}\n`;
            profileText += `‚è∞ *Last seen:* ${new Date(user.lastSeen).toLocaleString()}\n`;
            profileText += `üëë *Role:* ${user.isAdmin ? 'Admin' : 'User'}\n\n`;

            // Game statistics
            if (Object.keys(gameStats).length > 0) {
                profileText += `üéÆ *Game Statistics:*\n`;
                
                Object.entries(gameStats).forEach(([game, stats]) => {
                    const gameName = game.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                    profileText += `\nüéØ *${gameName}:*\n`;
                    profileText += `‚Ä¢ Played: ${stats.played || 0}\n`;
                    profileText += `‚Ä¢ Won: ${stats.won || 0}\n`;
                    profileText += `‚Ä¢ Score: ${stats.score || 0}\n`;
                });
            } else {
                profileText += `üéÆ *Games:* No games played yet\n\nTry /games to start playing!`;
            }

            await socket.sendMessage(message.key.remoteJid, {
                text: profileText,
                buttons: [
                    {
                        buttonId: 'games',
                        buttonText: { displayText: 'üéÆ Play Games' },
                        type: 1
                    },
                    {
                        buttonId: 'main_menu',
                        buttonText: { displayText: 'üè† Main Menu' },
                        type: 1
                    }
                ],
                headerType: 1,
                footer: 'Your bot profile'
            });

        } catch (error) {
            logger.error('‚ùå Error showing user profile:', error);
            await socket.sendMessage(message.key.remoteJid, {
                text: '‚ùå Error loading your profile. Please try again.'
            });
        }
    }
}

module.exports = new StartCommand();