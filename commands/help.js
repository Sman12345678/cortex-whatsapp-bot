const config = require('../config/config');
const logger = require('../utils/logger');
const commandHandler = require('./index');

class HelpCommand {
    async handle(socket, message, user, args) {
        try {
            if (args.length > 0) {
                await this.showCommandHelp(socket, message, user, args[0]);
            } else {
                await this.showHelpMenu(socket, message, user);
            }
        } catch (error) {
            logger.error('‚ùå Error in help command:', error);
            await socket.sendMessage(message.key.remoteJid, {
                text: '‚ùå Error loading help. Please try again.'
            });
        }
    }

    async showHelpMenu(socket, message, user) {
        try {
            const helpTextHeader = `üìö *Help Center*\n\nWelcome to *${config.BOT_NAME}*! Here's a list of available commands:\n\n`;
            let helpText = '';

            for (const [cmd, info] of Object.entries(commandHandler.getCommandInfo('') || {})) {
                if (!info.description) continue;
                if (info.adminOnly && !user.isAdmin) continue;
                helpText += `‚Ä¢ /${cmd} ‚Äî ${info.description}\n`;
            }

            helpText += `\nüí° Tip: Use /help <command> to see usage.`;

            await socket.sendMessage(message.key.remoteJid, { text: helpTextHeader + helpText });
        } catch (error) {
            logger.error('‚ùå Error showing help menu:', error);
        }
    }

    async showCommandHelp(socket, message, user, specificCommand = null) {
        try {
            const commandInfo = commandHandler.getCommandInfo(specificCommand);

            if (commandInfo) {
                let helpText = `üìã *Command: /${specificCommand}*\n\n`;
                helpText += `üìù *Description:* ${commandInfo.description}\n`;
                helpText += `üí° *Usage:* ${commandInfo.usage}\n`;
                helpText += `\nNeed more help? Use /help to see all commands.`;

                await socket.sendMessage(message.key.remoteJid, { text: helpText });
            } else {
                await socket.sendMessage(message.key.remoteJid, {
                    text: `‚ùì Command "/${specificCommand}" not found.\n\nUse /help to see all available commands.`
                });
            }
        } catch (error) {
            logger.error('‚ùå Error showing command help:', error);
        }
    }

    async showAIHelp(socket, message, user) {
        try {
            const aiHelpText = `ü§ñ *AI Features Help*\n\n` +
                `Our AI assistant can help you with various tasks:\n\n` +
                `üí¨ *Chat Features:*\n` +
                `‚Ä¢ Natural conversations\n` +
                `‚Ä¢ Question answering\n` +
                `‚Ä¢ Problem solving\n` +
                `‚Ä¢ Creative writing help\n` +
                `‚Ä¢ Explanations & tutorials\n\n` +
                `üìÑ *Document Analysis:*\n` +
                `‚Ä¢ PDF text extraction\n` +
                `‚Ä¢ Code file analysis\n` +
                `‚Ä¢ JSON/CSV processing\n` +
                `‚Ä¢ Excel spreadsheet reading\n` +
                `‚Ä¢ HTML content extraction\n\n` +
                `üñºÔ∏è *Image Analysis:*\n` +
                `‚Ä¢ Object recognition\n` +
                `‚Ä¢ Text extraction (OCR)\n` +
                `‚Ä¢ Scene description\n` +
                `‚Ä¢ Image content analysis\n\n` +
                `üí° *How to Use:*\n` +
                `‚Ä¢ Send any message to chat\n` +
                `‚Ä¢ Use /ai <message> for direct chat\n` +
                `‚Ä¢ Send files/images for analysis\n` +
                `‚Ä¢ Ask follow-up questions\n\n` +
                `‚ö° *Pro Tips:*\n` +
                `‚Ä¢ Be specific in your questions\n` +
                `‚Ä¢ Ask for examples when needed\n` +
                `‚Ä¢ Use follow-up questions\n` +
                `‚Ä¢ Try different file formats`;

            await socket.sendMessage(message.key.remoteJid, { text: aiHelpText });
        } catch (error) {
            logger.error('‚ùå Error showing AI help:', error);
        }
    }

    async showGameHelp(socket, message, user) {
        try {
            const gameHelpText = `üéÆ *Games Help*\n\n` +
                `Available games and how to play:\n\n` +
                `ü™® *Rock Paper Scissors:*\n` +
                `‚Ä¢ Classic game vs bot\n` +
                `‚Ä¢ Best of 3 rounds\n` +
                `‚Ä¢ Command: /rps\n\n` +
                `üß† *Quiz & Trivia:*\n` +
                `‚Ä¢ AI-generated questions\n` +
                `‚Ä¢ Multiple choice format\n` +
                `‚Ä¢ Command: /quiz [topic]\n\n` +
                `üèÜ *Scoring System:*\n` +
                `‚Ä¢ Earn points by playing\n` +
                `‚Ä¢ Climb the leaderboards\n` +
                `‚Ä¢ Track your statistics\n` +
                `‚Ä¢ Unlock achievements\n\n` +
                `üìä *Statistics:*\n` +
                `‚Ä¢ View with /gamestats\n` +
                `‚Ä¢ Track wins/losses\n` +
                `‚Ä¢ See your ranking\n` +
                `‚Ä¢ Compare with others\n\n` +
                `üí° *Tips:*\n` +
                `‚Ä¢ Play regularly to improve\n` +
                `‚Ä¢ Try different quiz topics\n` +
                `‚Ä¢ Check leaderboards\n` +
                `‚Ä¢ Challenge yourself!`;

            await socket.sendMessage(message.key.remoteJid, { text: gameHelpText });
        } catch (error) {
            logger.error('‚ùå Error showing game help:', error);
        }
    }

    async showAdminHelp(socket, message, user) {
        try {
            if (!user.isAdmin) {
                await socket.sendMessage(message.key.remoteJid, {
                    text: '‚ùå Admin help is only available to administrators.'
                });
                return;
            }

            const adminHelpText = `üëë *Admin Help*\n\n` +
                `Administrative commands and features:\n\n` +
                `üìä *Statistics & Monitoring:*\n` +
                `‚Ä¢ /stats - Detailed bot statistics\n` +
                `‚Ä¢ /status - Current bot status\n` +
                `‚Ä¢ View user activity & metrics\n` +
                `‚Ä¢ Monitor bot performance\n\n` +
                `üë• *User Management:*\n` +
                `‚Ä¢ /users - User management panel\n` +
                `‚Ä¢ /ban <phone> - Ban users\n` +
                `‚Ä¢ /unban <phone> - Unban users\n` +
                `‚Ä¢ /promote <phone> - Make admin\n` +
                `‚Ä¢ /demote <phone> - Remove admin\n\n` +
                `üì¢ *Broadcasting:*\n` +
                `‚Ä¢ /broadcast <message> - Send to all\n` +
                `‚Ä¢ Target specific user groups\n` +
                `‚Ä¢ Schedule announcements\n` +
                `‚Ä¢ Track delivery status\n\n` +
                `‚öôÔ∏è *Bot Configuration:*\n` +
                `‚Ä¢ Modify bot settings\n` +
                `‚Ä¢ Update welcome messages\n` +
                `‚Ä¢ Configure rate limits\n` +
                `‚Ä¢ Manage file restrictions\n\n` +
                `üîß *Maintenance:*\n` +
                `‚Ä¢ Database cleanup\n` +
                `‚Ä¢ Log file management\n` +
                `‚Ä¢ Performance optimization\n` +
                `‚Ä¢ Backup & restore\n\n` +
                `‚ö†Ô∏è *Security:*\n` +
                `‚Ä¢ Monitor abuse attempts\n` +
                `‚Ä¢ Review user reports\n` +
                `‚Ä¢ Audit admin actions\n` +
                `‚Ä¢ Emergency controls`;

            await socket.sendMessage(message.key.remoteJid, { text: adminHelpText });
        } catch (error) {
            logger.error('‚ùå Error showing admin help:', error);
        }
    }
}

module.exports = new HelpCommand();
