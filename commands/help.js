const config = require('../config/config');
const logger = require('../utils/logger');

class HelpCommand {
    async handle(socket, message, user, args) {
        try {
            if (args.length > 0) {
                // Show help for specific command
                await this.showCommandHelp(socket, message, user, args[0]);
            } else {
                // Show general help menu
                await this.showHelpMenu(socket, message, user);
            }
        } catch (error) {
            logger.error('‚ùå Error in help command:', error);
            await socket.sendMessage(message.key.remoteJid, {
                text: '‚ùå Error loading help. Please try again.'
            });
        }
    }

    async showHelpMenu(socket, message, user) {
        try {
            const helpText = `üìö *Help Center*\n\n` +
                `Welcome to the ${config.BOT_NAME} help center!\n\n` +
                `Choose a category to learn more:`;

            const buttons = [
                { id: 'help_commands', text: 'üìã All Commands' },
                { id: 'help_ai', text: 'ü§ñ AI Features' },
                { id: 'help_games', text: 'üéÆ Games' }
            ];

            if (user.isAdmin) {
                buttons.push({ id: 'help_admin', text: 'üëë Admin Help' });
            }

            await socket.sendMessage(message.key.remoteJid, {
                text: helpText,
                buttons: buttons.map((btn, index) => ({
                    buttonId: btn.id,
                    buttonText: { displayText: btn.text },
                    type: 1
                })),
                headerType: 1,
                footer: 'üìö Choose a help category'
            });

        } catch (error) {
            logger.error('‚ùå Error showing help menu:', error);
        }
    }

    async showCommandHelp(socket, message, user, specificCommand = null) {
        try {
            const commandHandler = require('./index');
            
            let helpText = `üìã *Available Commands*\n\n`;
            
            if (specificCommand) {
                const commandInfo = commandHandler.getCommandInfo(specificCommand);
                if (commandInfo) {
                    helpText = `üìã *Command: /${specificCommand}*\n\n`;
                    helpText += `üìù *Description:* ${commandInfo.description}\n`;
                    helpText += `üí° *Usage:* ${commandInfo.usage}\n\n`;
                    helpText += `Need more help? Try /help for all commands.`;
                } else {
                    helpText = `‚ùì Command "/${specificCommand}" not found.\n\nUse /help to see all available commands.`;
                }
            } else {
                const basicCommands = [
                    { cmd: 'start', desc: 'Start the bot and show welcome message' },
                    { cmd: 'help', desc: 'Show this help message' },
                    { cmd: 'menu', desc: 'Show main menu with options' },
                    { cmd: 'about', desc: 'About this bot' },
                    { cmd: 'status', desc: 'Check bot status' }
                ];

                const aiCommands = [
                    { cmd: 'ai <message>', desc: 'Chat with AI assistant' },
                    { cmd: 'chat <message>', desc: 'Start AI conversation' },
                    { cmd: 'ask <question>', desc: 'Ask AI a question' }
                ];

                const gameCommands = [
                    { cmd: 'games', desc: 'Show available games' },
                    { cmd: 'rps', desc: 'Play Rock Paper Scissors' },
                    { cmd: 'quiz [topic]', desc: 'Start quiz game' },
                    { cmd: 'gamestats', desc: 'Show your game statistics' }
                ];

                helpText += `üîß *Basic Commands:*\n`;
                basicCommands.forEach(c => helpText += `‚Ä¢ /${c.cmd} - ${c.desc}\n`);

                helpText += `\nü§ñ *AI Commands:*\n`;
                aiCommands.forEach(c => helpText += `‚Ä¢ /${c.cmd} - ${c.desc}\n`);

                helpText += `\nüéÆ *Game Commands:*\n`;
                gameCommands.forEach(c => helpText += `‚Ä¢ /${c.cmd} - ${c.desc}\n`);

                if (user.isAdmin) {
                    const adminCommands = [
                        { cmd: 'admin', desc: 'Open admin panel' },
                        { cmd: 'stats', desc: 'Show bot statistics' },
                        { cmd: 'users', desc: 'Manage users' },
                        { cmd: 'broadcast', desc: 'Send message to all users' }
                    ];

                    helpText += `\nüëë *Admin Commands:*\n`;
                    adminCommands.forEach(c => helpText += `‚Ä¢ /${c.cmd} - ${c.desc}\n`);
                }

                helpText += `\nüí° *Tips:*\n`;
                helpText += `‚Ä¢ Send any text to chat with AI\n`;
                helpText += `‚Ä¢ Send images/documents for analysis\n`;
                helpText += `‚Ä¢ Use buttons for easier interaction\n`;
                helpText += `‚Ä¢ Type /${config.BOT_PREFIX}help <command> for detailed help`;
            }

            await socket.sendMessage(message.key.remoteJid, {
                text: helpText,
                buttons: [
                    {
                        buttonId: 'help_ai',
                        buttonText: { displayText: 'ü§ñ AI Help' },
                        type: 1
                    },
                    {
                        buttonId: 'help_games',
                        buttonText: { displayText: 'üéÆ Game Help' },
                        type: 1
                    },
                    {
                        buttonId: 'main_menu',
                        buttonText: { displayText: 'üè† Main Menu' },
                        type: 1
                    }
                ],
                headerType: 1,
                footer: 'üìö Command Reference'
            });

        } catch (error) {
            logger.error('‚ùå Error showing command help:', error);
        }
    }

    async showAIHelp(socket, message, user) {
        try {
            const aiHelpText = `ü§ñ *AI Features Help*\n\n` +
                `Our AI assistant can help you with various tasks:\n\n` +
                `üí¨ *Chat Features:*\n` +
                `‚Ä¢ Natural conversations\n` +
                `‚Ä¢ Question answering\n` +
                `‚Ä¢ Problem solving\n` +
                `‚Ä¢ Creative writing help\n` +
                `‚Ä¢ Explanations & tutorials\n\n` +
                `üìÑ *Document Analysis:*\n` +
                `‚Ä¢ PDF text extraction\n` +
                `‚Ä¢ Code file analysis\n` +
                `‚Ä¢ JSON/CSV processing\n` +
                `‚Ä¢ Excel spreadsheet reading\n` +
                `‚Ä¢ HTML content extraction\n\n` +
                `üñºÔ∏è *Image Analysis:*\n` +
                `‚Ä¢ Object recognition\n` +
                `‚Ä¢ Text extraction (OCR)\n` +
                `‚Ä¢ Scene description\n` +
                `‚Ä¢ Image content analysis\n\n` +
                `üí° *How to Use:*\n` +
                `‚Ä¢ Send any message to chat\n` +
                `‚Ä¢ Use /ai <message> for direct chat\n` +
                `‚Ä¢ Send files/images for analysis\n` +
                `‚Ä¢ Ask follow-up questions\n\n` +
                `‚ö° *Pro Tips:*\n` +
                `‚Ä¢ Be specific in your questions\n` +
                `‚Ä¢ Ask for examples when needed\n` +
                `‚Ä¢ Use follow-up questions\n` +
                `‚Ä¢ Try different file formats`;

            await socket.sendMessage(message.key.remoteJid, {
                text: aiHelpText,
                buttons: [
                    {
                        buttonId: 'ai_demo',
                        buttonText: { displayText: 'ü§ñ Try AI Chat' },
                        type: 1
                    },
                    {
                        buttonId: 'help_commands',
                        buttonText: { displayText: 'üìã All Commands' },
                        type: 1
                    }
                ],
                headerType: 1,
                footer: 'ü§ñ AI Assistant Guide'
            });

        } catch (error) {
            logger.error('‚ùå Error showing AI help:', error);
        }
    }

    async showGameHelp(socket, message, user) {
        try {
            const gameHelpText = `üéÆ *Games Help*\n\n` +
                `Available games and how to play:\n\n` +
                `ü™® *Rock Paper Scissors:*\n` +
                `‚Ä¢ Classic game vs bot\n` +
                `‚Ä¢ Best of 3 rounds\n` +
                `‚Ä¢ Use buttons to choose\n` +
                `‚Ä¢ Command: /rps\n\n` +
                `üß† *Quiz & Trivia:*\n` +
                `‚Ä¢ AI-generated questions\n` +
                `‚Ä¢ Various topics available\n` +
                `‚Ä¢ Multiple choice format\n` +
                `‚Ä¢ Command: /quiz [topic]\n\n` +
                `üèÜ *Scoring System:*\n` +
                `‚Ä¢ Earn points by playing\n` +
                `‚Ä¢ Climb the leaderboards\n` +
                `‚Ä¢ Track your statistics\n` +
                `‚Ä¢ Unlock achievements\n\n` +
                `üìä *Statistics:*\n` +
                `‚Ä¢ View with /gamestats\n` +
                `‚Ä¢ Track wins/losses\n` +
                `‚Ä¢ See your ranking\n` +
                `‚Ä¢ Compare with others\n\n` +
                `üí° *Tips:*\n` +
                `‚Ä¢ Play regularly to improve\n` +
                `‚Ä¢ Try different quiz topics\n` +
                `‚Ä¢ Check leaderboards\n` +
                `‚Ä¢ Challenge yourself!`;

            await socket.sendMessage(message.key.remoteJid, {
                text: gameHelpText,
                buttons: [
                    {
                        buttonId: 'rps_play_again',
                        buttonText: { displayText: 'ü™® Play RPS' },
                        type: 1
                    },
                    {
                        buttonId: 'quiz_next',
                        buttonText: { displayText: 'üß† Start Quiz' },
                        type: 1
                    },
                    {
                        buttonId: 'gamestats_show',
                        buttonText: { displayText: 'üìä My Stats' },
                        type: 1
                    }
                ],
                headerType: 1,
                footer: 'üéÆ Gaming Guide'
            });

        } catch (error) {
            logger.error('‚ùå Error showing game help:', error);
        }
    }

    async showAdminHelp(socket, message, user) {
        try {
            if (!user.isAdmin) {
                await socket.sendMessage(message.key.remoteJid, {
                    text: '‚ùå Admin help is only available to administrators.'
                });
                return;
            }

            const adminHelpText = `üëë *Admin Help*\n\n` +
                `Administrative commands and features:\n\n` +
                `üìä *Statistics & Monitoring:*\n` +
                `‚Ä¢ /stats - Detailed bot statistics\n` +
                `‚Ä¢ /status - Current bot status\n` +
                `‚Ä¢ View user activity & metrics\n` +
                `‚Ä¢ Monitor bot performance\n\n` +
                `üë• *User Management:*\n` +
                `‚Ä¢ /users - User management panel\n` +
                `‚Ä¢ /ban <phone> - Ban users\n` +
                `‚Ä¢ /unban <phone> - Unban users\n` +
                `‚Ä¢ /promote <phone> - Make admin\n` +
                `‚Ä¢ /demote <phone> - Remove admin\n\n` +
                `üì¢ *Broadcasting:*\n` +
                `‚Ä¢ /broadcast <message> - Send to all\n` +
                `‚Ä¢ Target specific user groups\n` +
                `‚Ä¢ Schedule announcements\n` +
                `‚Ä¢ Track delivery status\n\n` +
                `‚öôÔ∏è *Bot Configuration:*\n` +
                `‚Ä¢ Modify bot settings\n` +
                `‚Ä¢ Update welcome messages\n` +
                `‚Ä¢ Configure rate limits\n` +
                `‚Ä¢ Manage file restrictions\n\n` +
                `üîß *Maintenance:*\n` +
                `‚Ä¢ Database cleanup\n` +
                `‚Ä¢ Log file management\n` +
                `‚Ä¢ Performance optimization\n` +
                `‚Ä¢ Backup & restore\n\n` +
                `‚ö†Ô∏è *Security:*\n` +
                `‚Ä¢ Monitor abuse attempts\n` +
                `‚Ä¢ Review user reports\n` +
                `‚Ä¢ Audit admin actions\n` +
                `‚Ä¢ Emergency controls`;

            await socket.sendMessage(message.key.remoteJid, {
                text: adminHelpText,
                buttons: [
                    {
                        buttonId: 'admin_stats',
                        buttonText: { displayText: 'üìä Bot Stats' },
                        type: 1
                    },
                    {
                        buttonId: 'admin_users',
                        buttonText: { displayText: 'üë• User Management' },
                        type: 1
                    },
                    {
                        buttonId: 'admin_settings',
                        buttonText: { displayText: '‚öôÔ∏è Settings' },
                        type: 1
                    }
                ],
                headerType: 1,
                footer: 'üëë Administrator Guide'
            });

        } catch (error) {
            logger.error('‚ùå Error showing admin help:', error);
        }
    }
}

module.exports = new HelpCommand();